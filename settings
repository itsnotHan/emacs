(setq inhibit-startup-message t)

(scroll-bar-mode -1)      
(tool-bar-mode -1)         
(tooltip-mode -1)          
(set-fringe-mode 10)       

(menu-bar-mode -1)            
(setq org-adapt-indentation t)


;; Set up the visible bell
(setq visible-bell t)

(set-face-attribute 'default nil :font "Fira Code" :height 150)

(load-theme 'wombat)

;; Make ESC quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

;; Initialize package sources
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
 (package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
   (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)

(use-package command-log-mode)

(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)	
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))

(use-package org-modern
  :hook (org-mode . org-modern-mode)
  :config
  (setq
   org-modern-star '("●" "○" "✸" "✿")
  ;; org-modern-star '( "⌾" "✸" "◈" "◇")
   org-modern-list '((42 . "◦") (43 . "•") (45 . "–"))
   org-modern-tag nil
   org-modern-priority nil
   org-modern-todo nil
   org-modern-table nil))


(defun display-time-bottom-right ()
  (and (equal (cddr (window-pixel-edges))
              (cddr (window-pixel-edges (frame-root-window))))
       '(#(" " 0 1 (display (space :align-to (- right 20))))
         display-time-string)))
(display-time-mode)
(setq global-mode-string '(:eval (display-time-bottom-right)))

(setq org-ellipsis "⤵")
(setq org-catch-invisible-edits 'smart)


;; Org-Babel
(org-babel-do-load-languages
 'org-babel-load-languages
 '(
   (python . t)
   ))
;; Syntax highlight in #+BEGIN_SRC blocks
(setq org-src-fontify-natively t)
;; Don't prompt before running code in org
(setq org-confirm-babel-evaluate nil)
(setq python-shell-completion-native-enable nil)
 
(defun org-setup ()
  (setq line-spacing 3)
  (centered-cursor-mode 1)
  (flyspell-mode-on)
  (fringe-mode '(1 . 4))
  )


(setq org-todo-keywords '((type
                           "TODO(t)"
                           "HW(h)"
                           "STUDY(s)"
                           "SOMEDAY(o)"
                           "READ(r)"
                           "PROJ(p)"
                           "VIDEO CALL(v)"
                           "DONE(d)")))


(setq org-todo-keyword-faces '(
                               ("TODO" :foreground "mediumorchid1" :weight bold)
                               ("HW" :foreground "white" :weight bold)
                               ("STUDY" :foreground "orange" :weight bold)
                               ("SOMEDAY" :foreground "cyan" :weight bold)
                               ("READ" :foreground "firebrick" :weight bold)
                               ("PROJ" :foreground "gold1" :weight bold)
                               ("DONE" :foreground "green")))
 
;; Priorities
(setq org-lowest-priority ?E)
(setq org-default-priority ?E)
 
(setq org-priority-faces
      '((65 . "red1")
        (66 . "yellow1")
        (67 . "Gold1")
        (68 . "PaleTurquoise3")
        (69 . "dark slate gray")))
 
